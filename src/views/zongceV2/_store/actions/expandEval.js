/* Automatically generated by './build/make/*.js' */

import api from "../../_api/expandEval.js";

const queryPunishList3 = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.queryPunishList(params).then(response => {
      resolve(response);
    });
  });

const getSchemeStateDict = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.getSchemeStateDict(params).then(response => {
      resolve(response);
    });
  });

const updateScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.updateScheme(params).then(response => {
      resolve(response);
    });
  });

const insertScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.insertScheme(params).then(response => {
      resolve(response);
    });
  });

const copyScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.copyScheme(params).then(response => {
      resolve(response);
    });
  });

const processSchemeName = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.processSchemeName(params).then(response => {
      resolve(response);
    });
  });

const deleteSchemeById = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.deleteSchemeById(params).then(response => {
      resolve(response);
    });
  });

const startScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.startScheme(params).then(response => {
      resolve(response);
    });
  });

const getEvalItemBeanBySchemeId = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.getEvalItemBeanBySchemeId(params).then(response => {
      resolve(response);
    });
  });

const saveExEveluateBean = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.saveExEveluateBean(params).then(response => {
      resolve(response);
    });
  });

const queryExpandEvalCategory = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.queryExpandEvalCategory(params).then(response => {
      resolve(response);
    });
  });
export default {
  queryPunishList3,
  getSchemeStateDict,
  updateScheme,
  insertScheme,
  copyScheme,
  processSchemeName,
  deleteSchemeById,
  startScheme,
  getEvalItemBeanBySchemeId,
  saveExEveluateBean,
  queryExpandEvalCategory
};
