/* Automatically generated by './build/make/*.js' */

import api from "../../_api/baseQuality.js";

const queryPunishList2 = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.queryPunishList(params).then(response => {
      resolve(response);
    });
  });

const getPunishStateDict = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.getPunishStateDict(params).then(response => {
      resolve(response);
    });
  });

const updateScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.updateScheme(params).then(response => {
      resolve(response);
    });
  });

const insertScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.insertScheme(params).then(response => {
      resolve(response);
    });
  });

const copyScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.copyScheme(params).then(response => {
      resolve(response);
    });
  });

const processSchemeName = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.processSchemeName(params).then(response => {
      resolve(response);
    });
  });

const deleteSchemeById = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.deleteSchemeById(params).then(response => {
      resolve(response);
    });
  });

const startScheme = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.startScheme(params).then(response => {
      resolve(response);
    });
  });

const getBaseQualtityItemBeanBySchemeId = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.getBaseQualtityItemBeanBySchemeId(params).then(response => {
      resolve(response);
    });
  });

const saveBaseQualtityItemBean = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.saveBaseQualtityItemBean(params).then(response => {
      resolve(response);
    });
  });

const queryBaseQualtityCategory = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.queryBaseQualtityCategory(params).then(response => {
      resolve(response);
    });
  });

const queryEvalList = ({ commit, state }, params) =>
  new Promise(resolve => {
    api.queryEvalList(params).then(response => {
      resolve(response);
    });
  });
export default {
  queryPunishList2,
  getPunishStateDict,
  updateScheme,
  insertScheme,
  copyScheme,
  processSchemeName,
  deleteSchemeById,
  startScheme,
  getBaseQualtityItemBeanBySchemeId,
  saveBaseQualtityItemBean,
  queryBaseQualtityCategory,
  queryEvalList
};
